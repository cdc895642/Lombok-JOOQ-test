/*
 * This file is generated by jOOQ.
*/
package com.site.jooqtest.model.tables;


import com.site.jooqtest.model.Keys;
import com.site.jooqtest.model.Public;
import com.site.jooqtest.model.tables.records.EpictableRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Epictable extends TableImpl<EpictableRecord> {

    private static final long serialVersionUID = -916496701;

    /**
     * The reference instance of <code>public.epictable</code>
     */
    public static final Epictable EPICTABLE = new Epictable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpictableRecord> getRecordType() {
        return EpictableRecord.class;
    }

    /**
     * The column <code>public.epictable.mytable_key</code>.
     */
    public final TableField<EpictableRecord, Integer> MYTABLE_KEY = createField("mytable_key", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('epictable_mytable_key_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.epictable.moobars</code>.
     */
    public final TableField<EpictableRecord, String> MOOBARS = createField("moobars", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>public.epictable.foobars</code>.
     */
    public final TableField<EpictableRecord, Date> FOOBARS = createField("foobars", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>public.epictable</code> table reference
     */
    public Epictable() {
        this("epictable", null);
    }

    /**
     * Create an aliased <code>public.epictable</code> table reference
     */
    public Epictable(String alias) {
        this(alias, EPICTABLE);
    }

    private Epictable(String alias, Table<EpictableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Epictable(String alias, Table<EpictableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EpictableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EPICTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EpictableRecord> getPrimaryKey() {
        return Keys.EPICTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EpictableRecord>> getKeys() {
        return Arrays.<UniqueKey<EpictableRecord>>asList(Keys.EPICTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Epictable as(String alias) {
        return new Epictable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Epictable rename(String name) {
        return new Epictable(name, null);
    }
}
