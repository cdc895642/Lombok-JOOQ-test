/*
 * This file is generated by jOOQ.
*/
package com.site.jooqtest.model.tables;


import com.site.jooqtest.model.Keys;
import com.site.jooqtest.model.Public;
import com.site.jooqtest.model.tables.records.ProducersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Producers extends TableImpl<ProducersRecord> {

    private static final long serialVersionUID = -1351456187;

    /**
     * The reference instance of <code>public.producers</code>
     */
    public static final Producers PRODUCERS = new Producers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProducersRecord> getRecordType() {
        return ProducersRecord.class;
    }

    /**
     * The column <code>public.producers.id</code>.
     */
    public final TableField<ProducersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('producers_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.producers.name</code>.
     */
    public final TableField<ProducersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "");

    /**
     * Create a <code>public.producers</code> table reference
     */
    public Producers() {
        this("producers", null);
    }

    /**
     * Create an aliased <code>public.producers</code> table reference
     */
    public Producers(String alias) {
        this(alias, PRODUCERS);
    }

    private Producers(String alias, Table<ProducersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Producers(String alias, Table<ProducersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProducersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProducersRecord> getPrimaryKey() {
        return Keys.PRODUCERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProducersRecord>> getKeys() {
        return Arrays.<UniqueKey<ProducersRecord>>asList(Keys.PRODUCERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Producers as(String alias) {
        return new Producers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Producers rename(String name) {
        return new Producers(name, null);
    }
}
